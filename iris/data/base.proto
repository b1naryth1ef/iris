syntax = 'proto3';

enum PacketType {
  Invalid = 0;
  BeginHandshake = 1;
  DenyHandshake = 2;
  AcceptHandshake = 3;
  CompleteHandshake = 4;
  Ping = 5;
  Pong = 6;
  Close = 7;
  RequestPeers = 8;
  ListPeers = 9;
  RequestShards = 10;
  ListShards = 11;
  SubscribeShard = 12;
  OfferBlock = 13;
  RequestBlocks = 14;
  ListBlocks = 15;
  RequestEntries = 16;
  ListEntries = 17;
}

message IBlock {
  string id = 1;
  string uid = 2;
  string shard = 3;
  uint64 solution = 4;
  IBlock parent = 5;
  IUser solver = 6;
  uint64 time = 7;
  string position = 8;
  bool initial = 9;
  uint64 proof = 10;
  bytes signature = 11;

  repeated string entries = 12;
  repeated IEntry ientries = 13;
}

message IEntry {
  string id = 1;
  string shard = 2;
  string author = 3;
  bytes payload = 4;
  bytes signature = 5;
  string created = 6;
  uint64 proof = 7;

  // Only set if we get the full entry
  IUser author_obj = 9;
}

message IUser {
  string id = 1;
  bytes pubkey = 2;
  bytes signkey = 3;
  string nickname = 4;
  bytes signature = 5;
  string first_authed = 6;
  string last_authed = 7;
}

message IPeer {
  string ip = 1;
  uint32 port = 2;
  IUser user = 3;
}

message IShard {
  string id = 1;
  string uid = 2;
  string name = 3;
  string desc = 4;
  bool public = 7;
  bytes meta = 8;
  IBlock initial = 9;

  repeated IPeer peers = 10;
}

message Packet {
  PacketType type = 1;
  bytes data = 2;
  string ticket = 3;
}

message PacketBeginHandshake {
  IPeer peer = 1;
  uint32 timestamp = 2;
  uint32 challenge = 3;

  // List of shards we are "subscribed" too
  repeated string shards = 4;
}

message PacketDenyHandshake {
  string reason = 1;
  uint32 backoff = 2;
}

message PacketAcceptHandshake {
  IPeer peer = 1;
  bytes response = 2;
  uint32 challenge = 3;
  repeated string shards = 4;
}

message PacketCompleteHandshake {
  bytes response = 1;
}

message PacketPing {
  uint32 timestamp = 1;
  uint32 challenge = 2;
}

message PacketPong {
  uint32 timestamp = 1;
  bytes response = 2;
}

message PacketClose {
  string reason = 1;
}

message PacketRequestPeers {
  uint32 maxsize = 1;
  repeated string shards = 2;
}

message PacketListPeers {
  repeated IPeer peers = 1;
}

message PacketSubscribeShard {
  string shard = 1;
  bool state = 2;
}

message PacketRequestShards {
  repeated string shards = 1;
  bool peers = 2;
}

message PacketListShards {
  repeated IShard shards = 1;
  repeated IShard peers = 2;
}

// Sent when someone solves the current block. This is used to distribute a new block across the network.
message PacketOfferBlock {
  string shard = 1;
  IBlock block = 2;
}

// Used to sync any part of the chain.
message PacketRequestBlocks {
  string shard = 1;
  bool brief = 2;

  // Option one, give a range of blocks
  string start_id = 3;
  string stop_id = 4;

  // Option two, give an offset-range
  int64 start_index = 5;
  int64 stop_index = 6;

  // Option three, give a set of block ids
  repeated string blocks = 7;
}

message PacketListBlocks {
  repeated IBlock blocks = 1;
}

message PacketRequestEntries {
  string shard = 1;

  // List of entries to retrieve
  repeated string entries = 2;

  // List of blocks to get entires for
  repeated string blocks = 3;
}

message PacketListEntries {
  repeated IEntry entry = 1;
}

